a = ['abc', 'aa', 'a', 'ddddd', 'aaa2']
value = [len(x) for x in a]
print(value)


### iterator () <- 괄호로 표현
it = (len(x) for x in a)
### 제너레이터 표현식은 즉시 이터레이터로 평가되므로 더는 진행되지 않는다.
print(it)

### 필요할 경우 next 내장 함수를 사용
print(next(it))
print(next(it))

### 제너레이터 표현식의 또 다른 강력한 결과는 다른 제너레이터 표현식과 함께 사용할 수 있다는 점이다. 다음은 앞의 제너레이터 표현식이 반환한 이터레이터를 다른 제너레이터 표현식의 입력으로 사용한 예다.
roots = ((x, x**0.5) for x in it)

### 이 이터레이터를 전진시킬 때마다 루프의 도미너 효과로 내부 이터레이터도 전신시키고 조건 표현식을 계산해서 입력과 출력을 처리한다.
print(next(roots))

### 이 처럼 제너레이터를 연결하면 파이썬에서 매우 빠르게 실행할 수 있다. 큰 입력 스트림에 동작하는 기능을 결합하는 방법을 찾을 때는 제너레이터 표현식이 최선의 도구다.
### 단, 제너레이터 표현식이 반환한 이터레이터에는 상태가 있으므로 이터레이터를 한 번 넘게 사용하지 않도록 주의해야 한다.